<?xml version="1.0" encoding="UTF-8"?>
<project name="dataspread" default="all">

  
  <property name="compiler.debug" value="on"/>
  <property name="compiler.generate.no.warnings" value="off"/>
  <property name="compiler.args" value=""/>
  <property name="compiler.max.memory" value="700m"/>
  <patternset id="ignored.files">
    <exclude name="**/*.hprof/**"/>
    <exclude name="**/*.pyc/**"/>
    <exclude name="**/*.pyo/**"/>
    <exclude name="**/*.rbc/**"/>
    <exclude name="**/*.yarb/**"/>
    <exclude name="**/*~/**"/>
    <exclude name="**/.DS_Store/**"/>
    <exclude name="**/.git/**"/>
    <exclude name="**/.hg/**"/>
    <exclude name="**/.svn/**"/>
    <exclude name="**/CVS/**"/>
    <exclude name="**/__pycache__/**"/>
    <exclude name="**/_svn/**"/>
    <exclude name="**/vssver.scc/**"/>
    <exclude name="**/vssver2.scc/**"/>
  </patternset>
  <patternset id="library.patterns">
    <include name="*.war"/>
    <include name="*.swc"/>
    <include name="*.apk"/>
    <include name="*.zip"/>
    <include name="*.egg"/>
    <include name="*.ane"/>
    <include name="*.jar"/>
    <include name="*.ear"/>
  </patternset>
  <patternset id="compiler.resources">
    <exclude name="**/?*.java"/>
    <exclude name="**/?*.form"/>
    <exclude name="**/?*.class"/>
    <exclude name="**/?*.groovy"/>
    <exclude name="**/?*.scala"/>
    <exclude name="**/?*.flex"/>
    <exclude name="**/?*.kt"/>
    <exclude name="**/?*.clj"/>
    <exclude name="**/?*.aj"/>
  </patternset>
  
  
  <!-- Project Libraries -->
  
  <path id="library.java_ee_6-java_ee_6.classpath">
    <pathelement location="${basedir}/lib/javax.annotation.jar"/>
    <pathelement location="${basedir}/lib/javax.ejb.jar"/>
    <pathelement location="${basedir}/lib/javax.jms.jar"/>
    <pathelement location="${basedir}/lib/javax.persistence.jar"/>
    <pathelement location="${basedir}/lib/javax.resource.jar"/>
    <pathelement location="${basedir}/lib/javax.servlet.jar"/>
    <pathelement location="${basedir}/lib/javax.servlet.jsp.jar"/>
    <pathelement location="${basedir}/lib/javax.servlet.jsp.jstl.jar"/>
    <pathelement location="${basedir}/lib/javax.transaction.jar"/>
  </path>
  
  <path id="library.lib.classpath">
    <fileset dir="${basedir}/lib">
      <patternset refid="library.patterns"/>
    </fileset>
  </path>
  
  <path id="library.postgresql-9.4.1208.classpath">
    <pathelement location="${basedir}/local_lib/postgresql-9.4.1208.jar"/>
  </path>
  
  <path id="library.tomcat-dbcp.classpath">
    <pathelement location="${basedir}/local_lib/tomcat-dbcp.jar"/>
  </path>
  
  
  <!-- Application Server Libraries -->
  
  <!-- Modules -->
  
  
  <!-- Module zpoi -->
  
  <dirname property="module.zpoi.basedir" file="${ant.file}"/>
  
  
  
  <property name="compiler.args.zpoi" value="-encoding UTF-8 -source 8 -target 1.8 ${compiler.args}"/>
  
  <property name="zpoi.output.dir" value="${module.zpoi.basedir}/zpoi/target/classes"/>
  <property name="zpoi.testoutput.dir" value="${module.zpoi.basedir}/zpoi/target/test-classes"/>
  
  <path id="zpoi.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="zpoi.module.production.classpath">
    <path refid="library.lib.classpath"/>
  </path>
  
  <path id="zpoi.runtime.production.module.classpath">
    <pathelement location="${zpoi.output.dir}"/>
    <path refid="library.lib.classpath"/>
  </path>
  
  <path id="zpoi.module.classpath">
    <pathelement location="${zpoi.output.dir}"/>
    <path refid="library.lib.classpath"/>
  </path>
  
  <path id="zpoi.runtime.module.classpath">
    <pathelement location="${zpoi.testoutput.dir}"/>
    <pathelement location="${zpoi.output.dir}"/>
    <path refid="library.lib.classpath"/>
  </path>
  
  
  <patternset id="excluded.from.module.zpoi">
    <patternset refid="ignored.files"/>
  </patternset>
  
  <patternset id="excluded.from.compilation.zpoi">
    <patternset refid="excluded.from.module.zpoi"/>
  </patternset>
  
  <path id="zpoi.module.sourcepath">
    <dirset dir="${module.zpoi.basedir}/zpoi">
      <include name="src"/>
    </dirset>
  </path>
  
  
  <target name="compile.module.zpoi" depends="compile.module.zpoi.production,compile.module.zpoi.tests" description="Compile module zpoi"/>
  
  <target name="compile.module.zpoi.production" description="Compile module zpoi; production classes">
    <mkdir dir="${zpoi.output.dir}"/>
    <javac destdir="${zpoi.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.zpoi}"/>
      <bootclasspath refid="zpoi.module.bootclasspath"/>
      <classpath refid="zpoi.module.production.classpath"/>
      <src refid="zpoi.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.zpoi"/>
    </javac>
    
    <copy todir="${zpoi.output.dir}">
      <fileset dir="${module.zpoi.basedir}/zpoi/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>
  
  <target name="compile.module.zpoi.tests" depends="compile.module.zpoi.production" description="compile module zpoi; test classes" unless="skip.tests"/>
  
  <target name="clean.module.zpoi" description="cleanup module">
    <delete dir="${zpoi.output.dir}"/>
    <delete dir="${zpoi.testoutput.dir}"/>
  </target>
  
  
  <!-- Module zssmodel -->
  
  <dirname property="module.zssmodel.basedir" file="${ant.file}"/>
  
  
  
  <property name="compiler.args.zssmodel" value="-encoding UTF-8 -source 8 -target 1.8 ${compiler.args}"/>
  
  <property name="zssmodel.output.dir" value="${module.zssmodel.basedir}/zssmodel/target/classes"/>
  <property name="zssmodel.testoutput.dir" value="${module.zssmodel.basedir}/zssmodel/target/test-classes"/>
  
  <path id="zssmodel.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="zssmodel.module.production.classpath">
    <pathelement location="${zpoi.output.dir}"/>
    <path refid="library.lib.classpath"/>
    <path refid="library.postgresql-9.4.1208.classpath"/>
    <path refid="library.tomcat-dbcp.classpath"/>
  </path>
  
  <path id="zssmodel.runtime.production.module.classpath">
    <pathelement location="${zssmodel.output.dir}"/>
    <path refid="zpoi.runtime.production.module.classpath"/>
    <path refid="library.lib.classpath"/>
  </path>
  
  <path id="zssmodel.module.classpath">
    <pathelement location="${zssmodel.output.dir}"/>
    <pathelement location="${zpoi.testoutput.dir}"/>
    <pathelement location="${zpoi.output.dir}"/>
    <path refid="library.lib.classpath"/>
    <path refid="library.postgresql-9.4.1208.classpath"/>
    <path refid="library.tomcat-dbcp.classpath"/>
  </path>
  
  <path id="zssmodel.runtime.module.classpath">
    <pathelement location="${zssmodel.testoutput.dir}"/>
    <pathelement location="${zssmodel.output.dir}"/>
    <path refid="zpoi.runtime.module.classpath"/>
    <path refid="library.lib.classpath"/>
    <path refid="library.postgresql-9.4.1208.classpath"/>
    <path refid="library.tomcat-dbcp.classpath"/>
  </path>
  
  
  <patternset id="excluded.from.module.zssmodel">
    <patternset refid="ignored.files"/>
  </patternset>
  
  <patternset id="excluded.from.compilation.zssmodel">
    <patternset refid="excluded.from.module.zssmodel"/>
  </patternset>
  
  <path id="zssmodel.module.sourcepath">
    <dirset dir="${module.zssmodel.basedir}/zssmodel">
      <include name="src"/>
    </dirset>
  </path>
  
  
  <target name="compile.module.zssmodel" depends="compile.module.zssmodel.production,compile.module.zssmodel.tests" description="Compile module zssmodel"/>
  
  <target name="compile.module.zssmodel.production" depends="compile.module.zpoi" description="Compile module zssmodel; production classes">
    <mkdir dir="${zssmodel.output.dir}"/>
    <javac destdir="${zssmodel.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.zssmodel}"/>
      <bootclasspath refid="zssmodel.module.bootclasspath"/>
      <classpath refid="zssmodel.module.production.classpath"/>
      <src refid="zssmodel.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.zssmodel"/>
    </javac>
    
    <copy todir="${zssmodel.output.dir}">
      <fileset dir="${module.zssmodel.basedir}/zssmodel/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>
  
  <target name="compile.module.zssmodel.tests" depends="compile.module.zssmodel.production" description="compile module zssmodel; test classes" unless="skip.tests"/>
  
  <target name="clean.module.zssmodel" description="cleanup module">
    <delete dir="${zssmodel.output.dir}"/>
    <delete dir="${zssmodel.testoutput.dir}"/>
  </target>
  
  
  <!-- Module zss -->
  
  <dirname property="module.zss.basedir" file="${ant.file}"/>
  
  
  
  <property name="compiler.args.zss" value="-encoding UTF-8 -source 8 -target 1.8 ${compiler.args}"/>
  
  <property name="zss.output.dir" value="${module.zss.basedir}/zss/target/classes"/>
  <property name="zss.testoutput.dir" value="${module.zss.basedir}/zss/target/test-classes"/>
  
  <path id="zss.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="zss.module.production.classpath">
    <pathelement location="${zpoi.output.dir}"/>
    <path refid="library.lib.classpath"/>
    <pathelement location="${zssmodel.output.dir}"/>
    <path refid="library.tomcat-dbcp.classpath"/>
  </path>
  
  <path id="zss.runtime.production.module.classpath">
    <pathelement location="${zss.output.dir}"/>
    <path refid="zpoi.runtime.production.module.classpath"/>
    <path refid="library.lib.classpath"/>
    <path refid="zssmodel.runtime.production.module.classpath"/>
  </path>
  
  <path id="zss.module.classpath">
    <pathelement location="${zss.output.dir}"/>
    <pathelement location="${zpoi.testoutput.dir}"/>
    <pathelement location="${zpoi.output.dir}"/>
    <path refid="library.lib.classpath"/>
    <pathelement location="${zssmodel.testoutput.dir}"/>
    <pathelement location="${zssmodel.output.dir}"/>
    <path refid="library.tomcat-dbcp.classpath"/>
  </path>
  
  <path id="zss.runtime.module.classpath">
    <pathelement location="${zss.testoutput.dir}"/>
    <pathelement location="${zss.output.dir}"/>
    <path refid="zpoi.runtime.module.classpath"/>
    <path refid="library.lib.classpath"/>
    <path refid="zssmodel.runtime.module.classpath"/>
  </path>
  
  
  <patternset id="excluded.from.module.zss">
    <patternset refid="ignored.files"/>
  </patternset>
  
  <patternset id="excluded.from.compilation.zss">
    <patternset refid="excluded.from.module.zss"/>
  </patternset>
  
  <path id="zss.module.sourcepath">
    <dirset dir="${module.zss.basedir}/zss">
      <include name="src"/>
    </dirset>
  </path>
  
  
  <target name="compile.module.zss" depends="compile.module.zss.production,compile.module.zss.tests" description="Compile module zss"/>
  
  <target name="compile.module.zss.production" depends="compile.module.zpoi,compile.module.zssmodel" description="Compile module zss; production classes">
    <mkdir dir="${zss.output.dir}"/>
    <javac destdir="${zss.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.zss}"/>
      <bootclasspath refid="zss.module.bootclasspath"/>
      <classpath refid="zss.module.production.classpath"/>
      <src refid="zss.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.zss"/>
    </javac>
    
    <copy todir="${zss.output.dir}">
      <fileset dir="${module.zss.basedir}/zss/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>
  
  <target name="compile.module.zss.tests" depends="compile.module.zss.production" description="compile module zss; test classes" unless="skip.tests"/>
  
  <target name="clean.module.zss" description="cleanup module">
    <delete dir="${zss.output.dir}"/>
    <delete dir="${zss.testoutput.dir}"/>
  </target>
  
  
  <!-- Module DataSpread -->
  
  <dirname property="module.dataspread.basedir" file="${ant.file}"/>
  
  
  
  <property name="compiler.args.dataspread" value="-encoding UTF-8 -source 8 -target 1.8 ${compiler.args}"/>
  
  <property name="dataspread.output.dir" value="${module.dataspread.basedir}/out/production/DataSpread"/>
  <property name="dataspread.testoutput.dir" value="${module.dataspread.basedir}/out/test/DataSpread"/>
  
  <path id="dataspread.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="dataspread.module.production.classpath">
    <path refid="library.lib.classpath"/>
    <path refid="library.java_ee_6-java_ee_6.classpath"/>
    <pathelement location="${zpoi.output.dir}"/>
    <pathelement location="${zss.output.dir}"/>
    <pathelement location="${zssmodel.output.dir}"/>
    <path refid="library.tomcat-dbcp.classpath"/>
    <path refid="library.postgresql-9.4.1208.classpath"/>
  </path>
  
  <path id="dataspread.runtime.production.module.classpath">
    <pathelement location="${dataspread.output.dir}"/>
    <path refid="library.lib.classpath"/>
    <path refid="library.java_ee_6-java_ee_6.classpath"/>
    <path refid="zpoi.runtime.production.module.classpath"/>
    <path refid="zss.runtime.production.module.classpath"/>
    <path refid="zssmodel.runtime.production.module.classpath"/>
  </path>
  
  <path id="dataspread.module.classpath">
    <pathelement location="${dataspread.output.dir}"/>
    <path refid="library.lib.classpath"/>
    <path refid="library.java_ee_6-java_ee_6.classpath"/>
    <pathelement location="${zpoi.testoutput.dir}"/>
    <pathelement location="${zpoi.output.dir}"/>
    <pathelement location="${zss.testoutput.dir}"/>
    <pathelement location="${zss.output.dir}"/>
    <pathelement location="${zssmodel.testoutput.dir}"/>
    <pathelement location="${zssmodel.output.dir}"/>
    <path refid="library.tomcat-dbcp.classpath"/>
    <path refid="library.postgresql-9.4.1208.classpath"/>
  </path>
  
  <path id="dataspread.runtime.module.classpath">
    <pathelement location="${dataspread.testoutput.dir}"/>
    <pathelement location="${dataspread.output.dir}"/>
    <path refid="library.lib.classpath"/>
    <path refid="library.java_ee_6-java_ee_6.classpath"/>
    <path refid="zpoi.runtime.module.classpath"/>
    <path refid="zss.runtime.module.classpath"/>
    <path refid="zssmodel.runtime.module.classpath"/>
    <path refid="library.postgresql-9.4.1208.classpath"/>
    <path refid="library.tomcat-dbcp.classpath"/>
  </path>
  
  
  <patternset id="excluded.from.module.dataspread">
    <patternset refid="ignored.files"/>
  </patternset>
  
  <patternset id="excluded.from.compilation.dataspread">
    <patternset refid="excluded.from.module.dataspread"/>
  </patternset>
  
  <path id="dataspread.module.sourcepath">
    <dirset dir="${module.dataspread.basedir}">
      <include name="src"/>
    </dirset>
  </path>
  
  
  <target name="compile.module.dataspread" depends="compile.module.dataspread.production,compile.module.dataspread.tests" description="Compile module DataSpread"/>
  
  <target name="compile.module.dataspread.production" depends="compile.module.zpoi,compile.module.zss,compile.module.zssmodel" description="Compile module DataSpread; production classes">
    <mkdir dir="${dataspread.output.dir}"/>
    <javac destdir="${dataspread.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.dataspread}"/>
      <bootclasspath refid="dataspread.module.bootclasspath"/>
      <classpath refid="dataspread.module.production.classpath"/>
      <src refid="dataspread.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.dataspread"/>
    </javac>
    
    <copy todir="${dataspread.output.dir}">
      <fileset dir="${module.dataspread.basedir}/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>
  
  <target name="compile.module.dataspread.tests" depends="compile.module.dataspread.production" description="compile module DataSpread; test classes" unless="skip.tests"/>
  
  <target name="clean.module.dataspread" description="cleanup module">
    <delete dir="${dataspread.output.dir}"/>
    <delete dir="${dataspread.testoutput.dir}"/>
  </target>
  
  <target name="init" description="Build initialization">
    <!-- Perform any build initialization in this target -->
  </target>
  
  <target name="clean" depends="clean.module.zpoi, clean.module.zssmodel, clean.module.zss, clean.module.dataspread, clean.artifact.dataspread:war_exploded, clean.artifact.zpoi:jar, clean.artifact.zss:jar, clean.artifact.zssmodel:jar" description="cleanup all"/>
  
  <target name="build.modules" depends="init, clean, compile.module.zpoi, compile.module.zssmodel, compile.module.zss, compile.module.dataspread" description="build all modules"/>
  
  <target name="init.artifacts">
    <property name="artifacts.temp.dir" value="${basedir}/__artifacts_temp"/>
    <property name="artifact.output.dataspread:war" value="${basedir}/out/artifacts/DataSpread_war"/>
    <property name="artifact.output.dataspread:war_exploded" value="${basedir}/out/artifacts/DataSpread_war_exploded"/>
    <property name="artifact.output.zpoi:jar" value="${basedir}/out/artifacts/zpoi_jar"/>
    <property name="artifact.output.zss:jar" value="${basedir}/out/artifacts/zss_jar"/>
    <property name="artifact.output.zssmodel:jar" value="${basedir}/out/artifacts/zssmodel_jar"/>
    <mkdir dir="${artifacts.temp.dir}"/>
    <property name="temp.jar.path.DataSpread_war.war" value="${artifacts.temp.dir}/DataSpread_war.war"/>
    <property name="temp.jar.path.zpoi.jar" value="${artifacts.temp.dir}/zpoi.jar"/>
    <property name="temp.jar.path.zss.jar" value="${artifacts.temp.dir}/zss.jar"/>
    <property name="temp.jar.path.zssmodel.jar" value="${artifacts.temp.dir}/zssmodel.jar"/>
  </target>
  
  <target name="clean.artifact.dataspread:war_exploded" description="clean DataSpread:war exploded artifact output">
    <delete dir="${artifact.output.dataspread:war_exploded}"/>
  </target>
  
  <target name="clean.artifact.zpoi:jar" description="clean zpoi:jar artifact output">
    <delete dir="${artifact.output.zpoi:jar}"/>
  </target>
  
  <target name="clean.artifact.zss:jar" description="clean zss:jar artifact output">
    <delete dir="${artifact.output.zss:jar}"/>
  </target>
  
  <target name="clean.artifact.zssmodel:jar" description="clean zssmodel:jar artifact output">
    <delete dir="${artifact.output.zssmodel:jar}"/>
  </target>
  
  <target name="artifact.dataspread:war" depends="init.artifacts, artifact.dataspread:war_exploded" description="Build &#39;DataSpread:war&#39; artifact">
    <property name="artifact.temp.output.dataspread:war" value="${artifacts.temp.dir}/DataSpread_war"/>
    <mkdir dir="${artifact.temp.output.dataspread:war}"/>
    <zip destfile="${temp.jar.path.DataSpread_war.war}">
      <zipfileset dir="${artifact.output.dataspread:war_exploded}"/>
    </zip>
    <copy file="${temp.jar.path.DataSpread_war.war}" tofile="${artifact.temp.output.dataspread:war}/DataSpread_war.war"/>
  </target>
  
  <target name="artifact.dataspread:war_exploded" depends="init.artifacts, compile.module.dataspread, compile.module.zssmodel, compile.module.zpoi, compile.module.zss" description="Build &#39;DataSpread:war exploded&#39; artifact">
    <mkdir dir="${artifact.output.dataspread:war_exploded}"/>
    <copy todir="${artifact.output.dataspread:war_exploded}">
      <fileset dir="${basedir}/web"/>
    </copy>
    <mkdir dir="${artifact.output.dataspread:war_exploded}/WEB-INF"/>
    <copy file="${basedir}/web/WEB-INF/web.xml" tofile="${artifact.output.dataspread:war_exploded}/WEB-INF/web.xml"/>
    <mkdir dir="${artifact.output.dataspread:war_exploded}/WEB-INF"/>
    <mkdir dir="${artifact.output.dataspread:war_exploded}/WEB-INF/classes"/>
    <copy todir="${artifact.output.dataspread:war_exploded}/WEB-INF/classes">
      <fileset dir="${dataspread.output.dir}"/>
    </copy>
    <copy todir="${artifact.output.dataspread:war_exploded}/WEB-INF/classes">
      <fileset dir="${zssmodel.output.dir}"/>
    </copy>
    <copy todir="${artifact.output.dataspread:war_exploded}/WEB-INF/classes">
      <fileset dir="${zpoi.output.dir}"/>
    </copy>
    <copy todir="${artifact.output.dataspread:war_exploded}/WEB-INF/classes">
      <fileset dir="${zss.output.dir}"/>
    </copy>
    <mkdir dir="${artifact.output.dataspread:war_exploded}/WEB-INF/lib"/>
    <copy file="${basedir}/lib/zk.jar" tofile="${artifact.output.dataspread:war_exploded}/WEB-INF/lib/zk.jar"/>
    <copy file="${basedir}/lib/bsh.jar" tofile="${artifact.output.dataspread:war_exploded}/WEB-INF/lib/bsh.jar"/>
    <copy file="${basedir}/lib/zel.jar" tofile="${artifact.output.dataspread:war_exploded}/WEB-INF/lib/zel.jar"/>
    <copy file="${basedir}/lib/zml.jar" tofile="${artifact.output.dataspread:war_exploded}/WEB-INF/lib/zml.jar"/>
    <copy file="${basedir}/lib/zul.jar" tofile="${artifact.output.dataspread:war_exploded}/WEB-INF/lib/zul.jar"/>
    <copy file="${basedir}/lib/zweb.jar" tofile="${artifact.output.dataspread:war_exploded}/WEB-INF/lib/zweb.jar"/>
    <copy file="${basedir}/lib/dom4j.jar" tofile="${artifact.output.dataspread:war_exploded}/WEB-INF/lib/dom4j.jar"/>
    <copy file="${basedir}/lib/itext.jar" tofile="${artifact.output.dataspread:war_exploded}/WEB-INF/lib/itext.jar"/>
    <copy file="${basedir}/lib/jsoup.jar" tofile="${artifact.output.dataspread:war_exploded}/WEB-INF/lib/jsoup.jar"/>
    <copy file="${basedir}/lib/junit.jar" tofile="${artifact.output.dataspread:war_exploded}/WEB-INF/lib/junit.jar"/>
    <copy file="${basedir}/lib/zkbind.jar" tofile="${artifact.output.dataspread:war_exploded}/WEB-INF/lib/zkbind.jar"/>
    <copy file="${basedir}/lib/zkplus.jar" tofile="${artifact.output.dataspread:war_exploded}/WEB-INF/lib/zkplus.jar"/>
    <copy file="${basedir}/lib/filters.jar" tofile="${artifact.output.dataspread:war_exploded}/WEB-INF/lib/filters.jar"/>
    <copy file="${basedir}/lib/jcommon.jar" tofile="${artifact.output.dataspread:war_exploded}/WEB-INF/lib/jcommon.jar"/>
    <copy file="${basedir}/lib/opencsv.jar" tofile="${artifact.output.dataspread:war_exploded}/WEB-INF/lib/opencsv.jar"/>
    <copy file="${basedir}/lib/zcommon.jar" tofile="${artifact.output.dataspread:war_exploded}/WEB-INF/lib/zcommon.jar"/>
    <copy file="${basedir}/lib/stax-api.jar" tofile="${artifact.output.dataspread:war_exploded}/WEB-INF/lib/stax-api.jar"/>
    <copy file="${basedir}/lib/xmlbeans.jar" tofile="${artifact.output.dataspread:war_exploded}/WEB-INF/lib/xmlbeans.jar"/>
    <copy file="${basedir}/lib/javax.ejb.jar" tofile="${artifact.output.dataspread:war_exploded}/WEB-INF/lib/javax.ejb.jar"/>
    <copy file="${basedir}/lib/javax.jms.jar" tofile="${artifact.output.dataspread:war_exploded}/WEB-INF/lib/javax.jms.jar"/>
    <copy file="${basedir}/lib/slf4j-api.jar" tofile="${artifact.output.dataspread:war_exploded}/WEB-INF/lib/slf4j-api.jar"/>
    <copy file="${basedir}/lib/commons-io.jar" tofile="${artifact.output.dataspread:war_exploded}/WEB-INF/lib/commons-io.jar"/>
    <copy file="${basedir}/lib/jfreechart.jar" tofile="${artifact.output.dataspread:war_exploded}/WEB-INF/lib/jfreechart.jar"/>
    <copy file="${basedir}/lib/kryo-4.0.0.jar" tofile="${artifact.output.dataspread:war_exploded}/WEB-INF/lib/kryo-4.0.0.jar"/>
    <copy file="${basedir}/lib/slf4j-jdk14.jar" tofile="${artifact.output.dataspread:war_exploded}/WEB-INF/lib/slf4j-jdk14.jar"/>
    <copy file="${basedir}/lib/commons-math.jar" tofile="${artifact.output.dataspread:war_exploded}/WEB-INF/lib/commons-math.jar"/>
    <copy file="${basedir}/lib/minlog-1.3.0.jar" tofile="${artifact.output.dataspread:war_exploded}/WEB-INF/lib/minlog-1.3.0.jar"/>
    <copy file="${basedir}/lib/commons-codec.jar" tofile="${artifact.output.dataspread:war_exploded}/WEB-INF/lib/commons-codec.jar"/>
    <copy file="${basedir}/lib/jasperreports.jar" tofile="${artifact.output.dataspread:war_exploded}/WEB-INF/lib/jasperreports.jar"/>
    <copy file="${basedir}/lib/javax.servlet.jar" tofile="${artifact.output.dataspread:war_exploded}/WEB-INF/lib/javax.servlet.jar"/>
    <copy file="${basedir}/lib/objenesis-2.1.jar" tofile="${artifact.output.dataspread:war_exploded}/WEB-INF/lib/objenesis-2.1.jar"/>
    <copy file="${basedir}/lib/ooxml-schemas.jar" tofile="${artifact.output.dataspread:war_exploded}/WEB-INF/lib/ooxml-schemas.jar"/>
    <copy file="${basedir}/lib/javax.resource.jar" tofile="${artifact.output.dataspread:war_exploded}/WEB-INF/lib/javax.resource.jar"/>
    <copy file="${basedir}/lib/commons-logging.jar" tofile="${artifact.output.dataspread:war_exploded}/WEB-INF/lib/commons-logging.jar"/>
    <copy file="${basedir}/lib/commons-digester.jar" tofile="${artifact.output.dataspread:war_exploded}/WEB-INF/lib/commons-digester.jar"/>
    <copy file="${basedir}/lib/javax.annotation.jar" tofile="${artifact.output.dataspread:war_exploded}/WEB-INF/lib/javax.annotation.jar"/>
    <copy file="${basedir}/lib/javax.persistence.jar" tofile="${artifact.output.dataspread:war_exploded}/WEB-INF/lib/javax.persistence.jar"/>
    <copy file="${basedir}/lib/javax.servlet.jsp.jar" tofile="${artifact.output.dataspread:war_exploded}/WEB-INF/lib/javax.servlet.jsp.jar"/>
    <copy file="${basedir}/lib/javax.transaction.jar" tofile="${artifact.output.dataspread:war_exploded}/WEB-INF/lib/javax.transaction.jar"/>
    <copy file="${basedir}/lib/commons-fileupload.jar" tofile="${artifact.output.dataspread:war_exploded}/WEB-INF/lib/commons-fileupload.jar"/>
    <copy file="${basedir}/lib/commons-collections.jar" tofile="${artifact.output.dataspread:war_exploded}/WEB-INF/lib/commons-collections.jar"/>
    <copy file="${basedir}/lib/javax.servlet.jsp.jstl.jar" tofile="${artifact.output.dataspread:war_exploded}/WEB-INF/lib/javax.servlet.jsp.jstl.jar"/>
    <copy file="${basedir}/lib/reflectasm-1.10.1-shaded.jar" tofile="${artifact.output.dataspread:war_exploded}/WEB-INF/lib/reflectasm-1.10.1-shaded.jar"/>
  </target>
  
  <target name="artifact.zpoi:jar" depends="init.artifacts, compile.module.zpoi" description="Build &#39;zpoi:jar&#39; artifact">
    <mkdir dir="${artifact.output.zpoi:jar}"/>
    <jar destfile="${temp.jar.path.zpoi.jar}" duplicate="preserve" filesetmanifest="mergewithoutmain">
      <zipfileset dir="${zpoi.output.dir}"/>
    </jar>
    <copy file="${temp.jar.path.zpoi.jar}" tofile="${artifact.output.zpoi:jar}/zpoi.jar"/>
  </target>
  
  <target name="artifact.zss:jar" depends="init.artifacts, compile.module.zss, compile.module.zssmodel, compile.module.zpoi" description="Build &#39;zss:jar&#39; artifact">
    <mkdir dir="${artifact.output.zss:jar}"/>
    <jar destfile="${temp.jar.path.zss.jar}" duplicate="preserve" filesetmanifest="mergewithoutmain">
      <zipfileset dir="${zss.output.dir}"/>
      <zipfileset dir="${zssmodel.output.dir}"/>
      <zipfileset dir="${zpoi.output.dir}"/>
    </jar>
    <copy file="${temp.jar.path.zss.jar}" tofile="${artifact.output.zss:jar}/zss.jar"/>
  </target>
  
  <target name="artifact.zssmodel:jar" depends="init.artifacts, compile.module.zssmodel, compile.module.zpoi" description="Build &#39;zssmodel:jar&#39; artifact">
    <mkdir dir="${artifact.output.zssmodel:jar}"/>
    <jar destfile="${temp.jar.path.zssmodel.jar}" duplicate="preserve" filesetmanifest="mergewithoutmain">
      <zipfileset dir="${zssmodel.output.dir}"/>
      <zipfileset dir="${zpoi.output.dir}"/>
    </jar>
    <copy file="${temp.jar.path.zssmodel.jar}" tofile="${artifact.output.zssmodel:jar}/zssmodel.jar"/>
  </target>
  
  <target name="build.all.artifacts" depends="artifact.dataspread:war, artifact.dataspread:war_exploded, artifact.zpoi:jar, artifact.zss:jar, artifact.zssmodel:jar" description="Build all artifacts">
    <mkdir dir="${artifact.output.dataspread:war}"/>
    <copy todir="${artifact.output.dataspread:war}">
      <fileset dir="${artifact.temp.output.dataspread:war}"/>
    </copy>
    
    <!-- Delete temporary files -->
    <delete dir="${artifacts.temp.dir}"/>
  </target>
  
  <target name="all" depends="build.modules, build.all.artifacts" description="build all"/>
</project>